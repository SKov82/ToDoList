{"version":3,"sources":["serviceWorker.ts","components/AddItem.tsx","components/EditableSpan.tsx","components/Task.tsx","components/ToDoList.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItem","React","memo","addItem","defaultTitle","useState","title","setTitle","error","setError","addHandler","useCallback","trim","TextField","value","onChange","event","currentTarget","onKeyPress","key","onBlur","autoFocus","label","variant","size","helperText","name","IconButton","onMouseDown","e","preventDefault","onClick","sx","marginLeft","fontSize","color","EditableSpan","editMode","setEditMode","changeEditMode","newTitle","onDoubleClick","position","right","Task","props","onChangeHandler","changeTaskTitle","todolistID","task","id","onClickHandler","removeTask","ListItem","className","isDone","divider","padding","Checkbox","checked","changeStatus","ToDoList","addTask","changeToDoListTitle","removeList","filteredTasks","tasks","filter","Grid","item","sm","md","lg","Paper","elevation","marginBottom","bgcolor","width","Typography","component","align","gutterBottom","fontWeight","maxWidth","List","map","el","ButtonGroup","Button","changeFilter","undefined","tdlInitialState","v1","initialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","toDoListId","taskId","type","payload","removeTaskAC","addTaskAC","changeStatusAC","changeTaskTitleAC","removeTasksArrayAC","removeTDListAC","addToDoList","addTDListAC","addTasksArrayAC","changeTDLTitleAC","changeFilterAC","AppBar","Toolbar","edge","aria-label","mr","flexGrow","marginTop","Container","container","spacing","justifyContent","rootReducer","combineReducers","action","tl","t","newState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.19c0c3f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport AddTaskIcon from '@mui/icons-material/AddTask';\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n    defaultTitle: string\r\n}\r\n\r\nexport const AddItem = React.memo( ({addItem, defaultTitle}: AddItemType) => {\r\n    const [title, setTitle] = useState<string>(defaultTitle)\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const addHandler = useCallback(() => {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle(defaultTitle)\r\n        } else {\r\n            setError('Field is required')\r\n        }\r\n    }, [title, addItem, defaultTitle])\r\n\r\n    return (\r\n        <>\r\n            <TextField value={title}\r\n                       onChange={ (event: ChangeEvent<HTMLInputElement>) => {\r\n                           setTitle(event.currentTarget.value)\r\n                           setError('')\r\n                       }}\r\n                       onKeyPress={ (event: KeyboardEvent<HTMLInputElement>) => {\r\n                           if (event.key === 'Enter') addHandler()\r\n                       }}\r\n                       onBlur={ () => addItem('') }\r\n                       autoFocus\r\n                       label={defaultTitle ? defaultTitle : 'Новая задача'}\r\n                       variant=\"outlined\"\r\n                       size={'small'}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n\r\n            {addItem.name !== 'changeEditMode'\r\n            ? <IconButton\r\n                    onMouseDown={(e) => {e.preventDefault()}}\r\n                    // onMouseDown перехватывает приоритет у onBlur и дает шанс отработать onClick\r\n                    onClick={addHandler}\r\n                    sx={{ marginLeft: \"2px\" }}\r\n                >\r\n                    <AddTaskIcon fontSize={'medium'} color={'primary'} />\r\n              </IconButton>\r\n            : ''}\r\n        </>\r\n    )\r\n} )","import React, {useCallback, useState} from 'react';\r\nimport {AddItem} from './AddItem';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {IconButton} from '@mui/material';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n    onClick: () => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(({title, onChange, onClick}: EditableSpanType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const changeEditMode = useCallback((newTitle: string) => {\r\n        setEditMode(!editMode)\r\n        if (newTitle && newTitle !== title) {\r\n            onChange(newTitle)\r\n        }\r\n    }, [editMode, title, onChange])\r\n\r\n    return (\r\n        editMode\r\n            ? <AddItem addItem={changeEditMode} defaultTitle={title} />\r\n            : <>\r\n                <span onDoubleClick={ () => changeEditMode('') }>{title}</span>\r\n                <IconButton onClick={onClick}\r\n                            color={'primary'}\r\n                            size={'small'}\r\n                            sx={{position: 'absolute', right: -7}}\r\n                >\r\n                    <DeleteIcon fontSize={'small'}/>\r\n                </IconButton>\r\n            </>\r\n    )\r\n} )","import {Checkbox, ListItem} from '@mui/material';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport React, {useCallback} from 'react';\r\nimport {TaskType} from './ToDoList';\r\n\r\ntype TaskPropsType = {\r\n    todolistID: string\r\n    task: TaskType\r\n    changeStatus: (toDoListId: string, taskId: string) => void\r\n    changeTaskTitle: (toDoListId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (toDoListId: string, taskId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onChangeHandler = useCallback((newTitle: string) => {\r\n        props.changeTaskTitle(props.todolistID, props.task.id, newTitle)\r\n    }, [props.changeTaskTitle, props.todolistID, props.task.id])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeTask(props.todolistID, props.task.id)\r\n    }, [props.removeTask, props.todolistID, props.task.id])\r\n\r\n    return (\r\n        <ListItem className={`${props.task.isDone ? 'is-done' : ''} ${'listItem'}`}\r\n                  divider={true}\r\n                  sx={{padding: '5px'}}\r\n        >\r\n            <Checkbox checked={props.task.isDone}\r\n                      onChange={() => props.changeStatus(props.todolistID, props.task.id)}\r\n                      size={'small'}\r\n            />\r\n\r\n            <EditableSpan title={props.task.title}\r\n                          onChange={onChangeHandler}\r\n                          onClick={onClickHandler}\r\n            />\r\n        </ListItem>\r\n    )\r\n} )","import React, {useCallback} from 'react';\r\nimport {FilterType} from '../App'\r\nimport {AddItem} from './AddItem';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, ButtonGroup, Grid, List, Paper, Typography} from '@mui/material';\r\nimport {Task} from './Task';\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (toDoListId: string, taskId: string) => void\r\n    changeFilter: (toDoListId: string, filter: FilterType) => void\r\n    addTask: (toDoListId: string, title: string) => void\r\n    changeStatus: (toDoListId: string, taskId: string) => void\r\n    changeTaskTitle: (toDoListId: string, taskId: string, newTitle: string) => void\r\n    filter: FilterType\r\n    removeList: (toDoListId: string) => void\r\n    changeToDoListTitle: (toDoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport const ToDoList = React.memo( (props: ToDoListType) => {\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(props.id, title)\r\n    }, [props.addTask, props.id])\r\n\r\n    const changeToDoListTitle = useCallback((newTitle: string) => {\r\n        props.changeToDoListTitle(props.id, newTitle)\r\n    }, [props.changeToDoListTitle, props.id])\r\n\r\n    const onClickHandler = useCallback(() => {\r\n        props.removeList(props.id)\r\n    }, [props.removeList, props.id])\r\n\r\n    let filteredTasks = props.tasks\r\n    if (props.filter === 'active') filteredTasks = props.tasks.filter(task => !task.isDone)\r\n    if (props.filter === 'done') filteredTasks = props.tasks.filter(task => task.isDone)\r\n\r\n    return (\r\n        <Grid item sm={6} md={4} lg={3}>\r\n            <Paper elevation={20} sx={{marginBottom: 3, padding: 3, bgcolor: \"#fbfae4\", width: \"fit-content\"}}>\r\n                <Typography position=\"relative\" variant=\"h5\" component=\"div\" align=\"center\" gutterBottom={true} fontWeight={600} maxWidth={270}>\r\n                    <EditableSpan title={props.title}\r\n                                  onChange={changeToDoListTitle}\r\n                                  onClick={onClickHandler}\r\n                    />\r\n                </Typography>\r\n\r\n                <AddItem addItem={addTask} defaultTitle={''} />\r\n\r\n                <List sx={{ width: '100%', maxWidth: 270 }}>\r\n                    {filteredTasks.map(el => <Task key={el.id}\r\n                                                   todolistID={props.id}\r\n                                                   task={el}\r\n                                                   changeStatus={props.changeStatus}\r\n                                                   changeTaskTitle={props.changeTaskTitle}\r\n                                                   removeTask={props.removeTask} />\r\n                    )}\r\n                </List>\r\n\r\n                <ButtonGroup variant={'outlined'}\r\n                             color={'primary'}\r\n                             size={'small'}\r\n                >\r\n                    <Button onClick={ () => props.changeFilter(props.id, 'all') }\r\n                            variant={props.filter === 'all' ? 'contained' : undefined}\r\n                    > Все </Button>\r\n\r\n                    <Button onClick={ () => props.changeFilter(props.id, 'active') }\r\n                            variant={props.filter === 'active' ? 'contained' : undefined}\r\n                    > Активные </Button>\r\n\r\n                    <Button onClick={ () => props.changeFilter(props.id, 'done') }\r\n                            variant={props.filter === 'done' ? 'contained' : undefined}\r\n                    > Завершенные </Button>\r\n                </ButtonGroup>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n} )","import {FilterType, ToDoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\ntype ActionType = removeTDListACType\r\n    | addTDListACType\r\n    | changeTDLTitleACType\r\n    | changeFilterACType\r\n\r\nexport const tdlInitialState: Array<ToDoListType> = [\r\n    {id: v1(), title: 'What to learn ', filter: 'all'},\r\n    {id: v1(), title: 'What to buy ', filter: 'active'},\r\n    {id: v1(), title: 'Films to watch ', filter: 'done'},\r\n]\r\n\r\nexport const todolistReducer = (state: Array<ToDoListType> = tdlInitialState, action: ActionType): ToDoListType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.payload.toDoListId)\r\n        case 'ADD-TODOLIST':\r\n            return [ { id: action.payload.toDoListId, title: action.payload.title, filter: 'all' }, ...state ]\r\n        case 'CHANGE-TDL-TITLE':\r\n            return state.map(tl => tl.id === action.payload.toDoListId ? {...tl, title: action.payload.title} : tl)\r\n        case 'CHANGE-FILTER':\r\n            return state.map(tl => tl.id === action.payload.toDoListId ? {...tl, filter: action.payload.filter} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype removeTDListACType = ReturnType<typeof removeTDListAC>\r\nexport const removeTDListAC = (toDoListId: string) => {\r\n    return { type: 'REMOVE-TODOLIST', payload: {toDoListId} } as const\r\n}\r\ntype addTDListACType = ReturnType<typeof addTDListAC>\r\nexport const addTDListAC = (toDoListId: string, title: string) => {\r\n    return { type: 'ADD-TODOLIST', payload: {toDoListId, title} } as const\r\n}\r\ntype changeTDLTitleACType = ReturnType<typeof changeTDLTitleAC>\r\nexport const changeTDLTitleAC = (toDoListId: string, title: string) => {\r\n    return { type: 'CHANGE-TDL-TITLE', payload: {toDoListId, title} } as const\r\n}\r\ntype changeFilterACType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (toDoListId: string, filter: FilterType) => {\r\n    return {type: 'CHANGE-FILTER', payload: {toDoListId, filter} } as const\r\n}","import {v1} from 'uuid';\r\nimport {TasksListType} from '../App';\r\nimport {tdlInitialState} from './todolist-reducer';\r\n\r\ntype ActionType = removeTaskACType\r\n    | addTaskACType\r\n    | changeTaskTitleACType\r\n    | changeStatusACType\r\n    | addTasksArrayACType\r\n    | removeTasksArrayACType\r\n\r\nconst initialState: TasksListType = {\r\n    [tdlInitialState[0]?.id]: [\r\n        {id: v1(), title: \"HTML/CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"TS\", isDone: false},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Python\", isDone: true},\r\n        {id: v1(), title: \"Django\", isDone: true},\r\n    ],\r\n    [tdlInitialState[1]?.id]: [\r\n        {id: v1(), title: \"Хлеб\", isDone: true},\r\n        {id: v1(), title: \"Молоко\", isDone: false},\r\n        {id: v1(), title: \"Сок\", isDone: false},\r\n        {id: v1(), title: \"Витамины\", isDone: true},\r\n    ],\r\n    [tdlInitialState[2]?.id]: [\r\n        {id: v1(), title: \"Дориан Грей\", isDone: true},\r\n        {id: v1(), title: \"Зеленая миля\", isDone: true},\r\n        {id: v1(), title: \"Знакомьтесь, Джо Блэк\", isDone: true},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksListType = initialState, action: ActionType): TasksListType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.payload.toDoListId]:\r\n                state[action.payload.toDoListId].filter(t => t.id !== action.payload.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {...state, [action.payload.toDoListId]:\r\n                [ {id: v1(), title: action.payload.title, isDone: false}, ...state[action.payload.toDoListId] ]\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {...state, [action.payload.toDoListId]: state[action.payload.toDoListId].map(\r\n                t => t.id === action.payload.taskId ? {...t, title: action.payload.title} : t\r\n            )}\r\n        case 'CHANGE-STATUS':\r\n            return {...state, [action.payload.toDoListId]: state[action.payload.toDoListId].map(\r\n                t => t.id === action.payload.taskId ? {...t, isDone: !t.isDone} : t\r\n            )}\r\n        case 'ADD-TASKS-ARRAY':\r\n            return { [action.payload.toDoListId]: [], ...state }\r\n        case 'REMOVE-TASKS-ARRAY':\r\n            let newState = {...state}\r\n            delete newState[action.payload.toDoListId]\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (toDoListId: string, taskId: string) => {\r\n    return { type: 'REMOVE-TASK', payload: {toDoListId, taskId} } as const\r\n}\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (toDoListId: string, title: string) => {\r\n    return { type: 'ADD-TASK', payload: {toDoListId, title} } as const\r\n}\r\ntype changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (toDoListId: string, taskId: string, title: string) => {\r\n    return { type: 'CHANGE-TASK-TITLE', payload: {toDoListId, taskId, title} } as const\r\n}\r\ntype changeStatusACType = ReturnType<typeof changeStatusAC>\r\nexport const changeStatusAC = (toDoListId: string, taskId: string) => {\r\n    return { type: 'CHANGE-STATUS', payload: {toDoListId, taskId} } as const\r\n}\r\ntype addTasksArrayACType = ReturnType<typeof addTasksArrayAC>\r\nexport const addTasksArrayAC = (toDoListId: string) => {\r\n    return { type: 'ADD-TASKS-ARRAY', payload: {toDoListId} } as const\r\n}\r\ntype removeTasksArrayACType = ReturnType<typeof removeTasksArrayAC>\r\nexport const removeTasksArrayAC = (toDoListId: string) => {\r\n    return { type: 'REMOVE-TASKS-ARRAY', payload: {toDoListId} } as const\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./components/ToDoList\";\r\nimport {v1} from 'uuid';\r\nimport {AddItem} from './components/AddItem';\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {\r\n    addTaskAC, addTasksArrayAC, changeStatusAC, changeTaskTitleAC,\r\n    removeTaskAC, removeTasksArrayAC\r\n} from './state/tasks-reducer';\r\nimport {\r\n    addTDListAC, changeFilterAC, changeTDLTitleAC, removeTDListAC\r\n} from './state/todolist-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from './state/store';\r\n\r\nexport type FilterType = 'all' | 'active' | 'done'\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppStateType, Array<ToDoListType>>( state => state.todolists )\r\n    const tasks = useSelector<AppStateType, TasksListType>( state => state.tasks )\r\n\r\n    const removeTask = useCallback((toDoListId: string, taskId: string) => {\r\n        dispatch(removeTaskAC(toDoListId, taskId))\r\n    }, [dispatch])\r\n    const addTask = useCallback((toDoListId: string, title: string) => {\r\n        if (title && toDoListId) dispatch(addTaskAC(toDoListId, title))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((toDoListId: string, taskId: string) => {\r\n        dispatch(changeStatusAC(toDoListId, taskId))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((toDoListId: string, taskId: string, newTitle: string) => {\r\n        dispatch(changeTaskTitleAC(toDoListId, taskId, newTitle))\r\n    }, [dispatch])\r\n\r\n    const removeList = useCallback((toDoListId: string) => {\r\n        dispatch(removeTasksArrayAC(toDoListId))\r\n        dispatch(removeTDListAC(toDoListId))\r\n    }, [dispatch])\r\n    const addToDoList = useCallback((title: string) => {\r\n        if (title) {\r\n            let toDoListId = v1()\r\n            dispatch(addTDListAC(toDoListId, title))\r\n            dispatch(addTasksArrayAC(toDoListId))\r\n        }\r\n    }, [dispatch])\r\n    const changeToDoListTitle = useCallback((toDoListId: string, newTitle: string) => {\r\n        dispatch(changeTDLTitleAC(toDoListId, newTitle))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((toDoListId: string, filter: FilterType) => {\r\n        dispatch(changeFilterAC(toDoListId, filter))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        ToDoLists\r\n                    </Typography>\r\n\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Grid sx={{ marginTop: 3, marginLeft: 3 }}>\r\n                <AddItem addItem={ (title: string) => addToDoList(title) }\r\n                         defaultTitle={'Новый ToDoList'}\r\n                />\r\n            </Grid>\r\n\r\n            <Container maxWidth=\"xl\" sx={{ marginTop: 3 }}>\r\n                <Grid container spacing={5} justifyContent={'space-evenly'}>\r\n                    {todolists.map(el => {\r\n                        return <ToDoList\r\n                            key={el.id}\r\n                            id={el.id}\r\n                            title={el.title}\r\n                            tasks={tasks[el.id]}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            filter={el.filter}\r\n                            removeList={removeList}\r\n                            changeToDoListTitle={changeToDoListTitle}\r\n                        />\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: tasksReducer\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\n// ReactDOM.render(<App />,  document.getElementById('root'));\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}