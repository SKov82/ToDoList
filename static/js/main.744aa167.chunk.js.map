{"version":3,"sources":["components/AddItem.tsx","components/EditableSpan.tsx","components/ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItem","addItem","defaultTitle","useState","title","setTitle","error","setError","addHandler","trim","TextField","value","onChange","event","currentTarget","onKeyPress","key","onBlur","autoFocus","label","variant","size","helperText","name","IconButton","onClick","sx","marginLeft","fontSize","color","EditableSpan","editMode","setEditMode","changeEditMode","newTitle","onDoubleClick","ToDoList","props","Grid","item","sm","md","lg","Paper","elevation","marginBottom","padding","bgcolor","width","Typography","component","align","gutterBottom","fontWeight","maxWidth","changeToDoListTitle","id","removeList","addTask","List","tasks","map","el","ListItem","className","isDone","divider","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","ButtonGroup","Button","changeFilter","filter","undefined","App","toDoListId","task","setTasks","v1","toDoList","toDoLists","find","setToDoLists","filteredToDoList","AppBar","position","Toolbar","edge","aria-label","mr","flexGrow","marginTop","newToDoList","addToDoList","Container","container","spacing","justifyContent","filteredTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.744aa167.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport AddTaskIcon from '@mui/icons-material/AddTask';\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n    defaultTitle: string\r\n}\r\n\r\nexport function AddItem({addItem, defaultTitle}: AddItemType) {\r\n    const [title, setTitle] = useState<string>(defaultTitle)\r\n    const [error, setError] = useState<string>('')\r\n\r\n    function addHandler() {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle(defaultTitle)\r\n        } else {\r\n            setError('Field is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TextField value={title}\r\n                       onChange={ (event: ChangeEvent<HTMLInputElement>) => {\r\n                           setTitle(event.currentTarget.value)\r\n                           setError('')\r\n                       }}\r\n                       onKeyPress={ (event: KeyboardEvent<HTMLInputElement>) => {\r\n                           if (event.key === 'Enter') addHandler()\r\n                       }}\r\n                       onBlur={ () => addItem('') }\r\n                       autoFocus\r\n                       label={defaultTitle ? defaultTitle : 'Новая задача'}\r\n                       variant=\"outlined\"\r\n                       size={'small'}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n\r\n            {addItem.name !== 'changeEditMode'\r\n            ? <IconButton onClick={addHandler} sx={{ marginLeft: \"2px\" }}>\r\n                    <AddTaskIcon fontSize={'medium'} color={'primary'} />\r\n              </IconButton>\r\n            : ''}\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {AddItem} from './AddItem';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan({title, onChange}: EditableSpanType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    function changeEditMode(newTitle: string) {\r\n        setEditMode(!editMode)\r\n        if (newTitle && newTitle !== title) {\r\n            onChange(newTitle)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n        ? <AddItem addItem={changeEditMode} defaultTitle={title} />\r\n        : <span onDoubleClick={ () => changeEditMode('') }>{title}</span>\r\n    )\r\n}","import React from 'react';\r\nimport {FilterType} from '../App'\r\nimport {AddItem} from './AddItem';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, ButtonGroup, Checkbox, Grid, IconButton, List, ListItem, Paper, Typography} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    changeFilter: (filter: FilterType, toDoListId: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    changeStatus: (id: string, toDoListId: string) => void\r\n    changeTaskTitle: (toDoListId: string, id: string, newTitle: string) => void\r\n    filter: FilterType\r\n    removeList: (toDoListId: string) => void\r\n    changeToDoListTitle: (toDoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function ToDoList(props: ToDoListType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const changeToDoListTitle = (newTitle: string) => {\r\n        props.changeToDoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <Grid item sm={6} md={4} lg={3}>\r\n            <Paper elevation={20} sx={{marginBottom: 3, padding: 3, bgcolor: \"#fbfae4\", width: \"fit-content\"}}>\r\n                <Typography variant=\"h5\" component=\"div\" align=\"center\" gutterBottom={true} fontWeight={600} maxWidth={270}>\r\n                    <EditableSpan title={props.title} onChange={changeToDoListTitle}/>\r\n\r\n                    <IconButton onClick={ () => props.removeList(props.id) }\r\n                                color={'primary'}\r\n                                size={'small'}\r\n                    >\r\n                        <DeleteIcon fontSize={'small'} />\r\n                    </IconButton>\r\n                </Typography>\r\n\r\n                <AddItem addItem={addTask} defaultTitle={''} />\r\n\r\n                <List sx={{ width: '100%', maxWidth: 270 }}>\r\n                    {props.tasks.map(el => {\r\n                        const onChangeHandler = (newTitle: string) => {\r\n                            props.changeTaskTitle(props.id, el.id, newTitle)\r\n                        }\r\n\r\n                        return (\r\n                            <ListItem key={el.id}\r\n                                      className={el.isDone ? 'is-done' : ''}\r\n                                      divider={true}\r\n                                      sx={{ padding: \"5px\" }}\r\n                            >\r\n                                <Checkbox\r\n                                    checked={el.isDone}\r\n                                    onChange={ () => props.changeStatus(el.id, props.id) }\r\n                                    size={'small'}\r\n                                />\r\n\r\n                                <EditableSpan title={el.title} onChange={onChangeHandler} />\r\n\r\n                                <IconButton onClick={ () => props.removeTask(el.id, props.id) }\r\n                                            color={'primary'}\r\n                                            size={'small'}\r\n                                >\r\n                                    <DeleteIcon fontSize={'small'} />\r\n                                </IconButton>\r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                </List>\r\n\r\n                <ButtonGroup variant={'outlined'}\r\n                             color={'primary'}\r\n                             size={'small'}\r\n                >\r\n                    <Button onClick={ () => props.changeFilter('all', props.id) }\r\n                            variant={props.filter === 'all' ? 'contained' : undefined}\r\n                    > Все </Button>\r\n\r\n                    <Button onClick={ () => props.changeFilter('active', props.id) }\r\n                            variant={props.filter === 'active' ? 'contained' : undefined}\r\n                    > Активные </Button>\r\n\r\n                    <Button onClick={ () => props.changeFilter('done', props.id) }\r\n                            variant={props.filter === 'done' ? 'contained' : undefined}\r\n                    > Завершенные </Button>\r\n                </ButtonGroup>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./components/ToDoList\";\r\nimport {v1} from 'uuid';\r\nimport {AddItem} from './components/AddItem';\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport type FilterType = 'all' | 'active' | 'done'\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\n\r\ntype TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    function removeTask(id: string, toDoListId: string) {\r\n        tasks[toDoListId] = tasks[toDoListId].filter(task => task.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, toDoListId: string) {\r\n        if (title && toDoListId) {\r\n            tasks[toDoListId] = [{\r\n                id: v1(),\r\n                title: title,\r\n                isDone: false\r\n            },\r\n                ...tasks[toDoListId]\r\n            ]\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeFilter(filter: FilterType, toDoListId: string) {\r\n        let toDoList = toDoLists.find(toDoList => toDoList.id === toDoListId)\r\n        if (toDoList) {\r\n            toDoList.filter = filter\r\n            setToDoLists([...toDoLists])\r\n        }\r\n    }\r\n\r\n    function changeStatus(id: string, toDoListId: string) {\r\n        let task: TaskType | undefined = tasks[toDoListId].find(task => id === task.id)\r\n        if (task) {\r\n            task.isDone = !task.isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeTaskTitle(toDoListId: string, id: string, newTitle: string) {\r\n        let task: TaskType | undefined = tasks[toDoListId].find(task => task.id === id)\r\n        if (task) task.title = newTitle\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    let [toDoLists, setToDoLists] = useState<Array<ToDoListType>>([\r\n        {id: v1(), title: 'What to learn ', filter: 'all'},\r\n        {id: v1(), title: 'What to buy ', filter: 'active'},\r\n        {id: v1(), title: 'Films to watch ', filter: 'done'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksListType>({\r\n        [toDoLists[0]?.id]: [\r\n            {id: v1(), title: \"HTML/CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"TS\", isDone: false},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n            {id: v1(), title: \"Python\", isDone: true},\r\n            {id: v1(), title: \"Django\", isDone: true},\r\n        ],\r\n        [toDoLists[1]?.id]: [\r\n            {id: v1(), title: \"Хлеб\", isDone: true},\r\n            {id: v1(), title: \"Молоко\", isDone: false},\r\n            {id: v1(), title: \"Сок\", isDone: false},\r\n            {id: v1(), title: \"Витамины\", isDone: true},\r\n        ],\r\n        [toDoLists[2]?.id]: [\r\n            {id: v1(), title: \"Дориан Грей\", isDone: true},\r\n            {id: v1(), title: \"Зеленая миля\", isDone: true},\r\n            {id: v1(), title: \"Знакомьтесь, Джо Блэк\", isDone: true},\r\n        ]\r\n    })\r\n\r\n    function removeList(toDoListId: string) {\r\n        let filteredToDoList = toDoLists.filter(el => el.id !== toDoListId)\r\n        delete tasks[toDoListId]\r\n        setToDoLists(filteredToDoList)\r\n    }\r\n\r\n    function addToDoList(title: string) {\r\n        if (title) {\r\n            let newToDoList: ToDoListType = {id: v1(), title: title, filter: 'all'}\r\n            tasks[newToDoList.id] = []\r\n            setToDoLists([newToDoList, ...toDoLists])\r\n        }\r\n    }\r\n\r\n    function changeToDoListTitle(id: string, newTitle: string) {\r\n        let toDoList: ToDoListType | undefined  = toDoLists.find(toDoList => toDoList.id === id)\r\n        if (toDoList) toDoList.title = newTitle\r\n        setToDoLists([...toDoLists])\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        ToDoLists\r\n                    </Typography>\r\n\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Grid sx={{ marginTop: 3, marginLeft: 3 }}>\r\n                <AddItem addItem={ (title: string) => addToDoList(title) }\r\n                         defaultTitle={'Новый ToDoList'}\r\n                />\r\n            </Grid>\r\n\r\n            <Container maxWidth=\"xl\" sx={{ marginTop: 3 }}>\r\n                <Grid container spacing={5} justifyContent={'space-evenly'}>\r\n                    {toDoLists.map(el => {\r\n                        let filteredTasks = tasks[el.id]\r\n                        if (el.filter === 'active') filteredTasks = tasks[el.id].filter(task => !task.isDone)\r\n                        if (el.filter === 'done') filteredTasks = tasks[el.id].filter(task => task.isDone)\r\n\r\n                        return <ToDoList\r\n                            key={el.id}\r\n                            id={el.id}\r\n                            title={el.title}\r\n                            tasks={filteredTasks}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            filter={el.filter}\r\n                            removeList={removeList}\r\n                            changeToDoListTitle={changeToDoListTitle}\r\n                        />\r\n                        }\r\n                    )}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}