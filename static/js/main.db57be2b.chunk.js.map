{"version":3,"sources":["serviceWorker.ts","components/AddItem.tsx","components/EditableSpan.tsx","components/ToDoList.tsx","state/todolist-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItem","addItem","defaultTitle","useState","title","setTitle","error","setError","addHandler","trim","TextField","value","onChange","event","currentTarget","onKeyPress","key","onBlur","autoFocus","label","variant","size","helperText","name","IconButton","onClick","sx","marginLeft","fontSize","color","EditableSpan","editMode","setEditMode","changeEditMode","newTitle","onDoubleClick","ToDoList","props","Grid","item","sm","md","lg","Paper","elevation","marginBottom","padding","bgcolor","width","Typography","component","align","gutterBottom","fontWeight","maxWidth","changeToDoListTitle","id","removeList","addTask","List","tasks","map","el","ListItem","className","isDone","divider","Checkbox","checked","changeStatus","changeTaskTitle","removeTask","ButtonGroup","Button","changeFilter","filter","undefined","tdlInitialState","v1","initialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","toDoListId","taskId","type","payload","removeTaskAC","addTaskAC","changeStatusAC","changeTaskTitleAC","removeTasksArrayAC","removeTDListAC","changeTDLTitleAC","changeFilterAC","AppBar","position","Toolbar","edge","aria-label","mr","flexGrow","marginTop","addTDListAC","addTasksArrayAC","addToDoList","Container","container","spacing","justifyContent","filteredTasks","task","rootReducer","combineReducers","action","tl","t","newState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.db57be2b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@mui/material';\r\nimport AddTaskIcon from '@mui/icons-material/AddTask';\r\n\r\ntype AddItemType = {\r\n    addItem: (title: string) => void\r\n    defaultTitle: string\r\n}\r\n\r\nexport function AddItem({addItem, defaultTitle}: AddItemType) {\r\n    const [title, setTitle] = useState<string>(defaultTitle)\r\n    const [error, setError] = useState<string>('')\r\n\r\n    function addHandler() {\r\n        if (title.trim()) {\r\n            addItem(title.trim())\r\n            setTitle(defaultTitle)\r\n        } else {\r\n            setError('Field is required')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TextField value={title}\r\n                       onChange={ (event: ChangeEvent<HTMLInputElement>) => {\r\n                           setTitle(event.currentTarget.value)\r\n                           setError('')\r\n                       }}\r\n                       onKeyPress={ (event: KeyboardEvent<HTMLInputElement>) => {\r\n                           if (event.key === 'Enter') addHandler()\r\n                       }}\r\n                       onBlur={ () => addItem('') }\r\n                       autoFocus\r\n                       label={defaultTitle ? defaultTitle : 'Новая задача'}\r\n                       variant=\"outlined\"\r\n                       size={'small'}\r\n                       error={!!error}\r\n                       helperText={error}\r\n            />\r\n\r\n            {addItem.name !== 'changeEditMode'\r\n            ? <IconButton onClick={addHandler} sx={{ marginLeft: \"2px\" }}>\r\n                    <AddTaskIcon fontSize={'medium'} color={'primary'} />\r\n              </IconButton>\r\n            : ''}\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {AddItem} from './AddItem';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan({title, onChange}: EditableSpanType) {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    function changeEditMode(newTitle: string) {\r\n        setEditMode(!editMode)\r\n        if (newTitle && newTitle !== title) {\r\n            onChange(newTitle)\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <AddItem addItem={changeEditMode} defaultTitle={title} />\r\n            : <span onDoubleClick={ () => changeEditMode('') }>{title}</span>\r\n    )\r\n}","import React from 'react';\r\nimport {FilterType} from '../App'\r\nimport {AddItem} from './AddItem';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {\r\n    Button, ButtonGroup, Checkbox, Grid, IconButton, List, ListItem, Paper, Typography\r\n} from '@mui/material';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype ToDoListType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (toDoListId: string, taskId: string) => void\r\n    changeFilter: (toDoListId: string, filter: FilterType) => void\r\n    addTask: (toDoListId: string, title: string) => void\r\n    changeStatus: (toDoListId: string, taskId: string) => void\r\n    changeTaskTitle: (toDoListId: string, taskId: string, newTitle: string) => void\r\n    filter: FilterType\r\n    removeList: (toDoListId: string) => void\r\n    changeToDoListTitle: (toDoListId: string, newTitle: string) => void\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport function ToDoList(props: ToDoListType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(props.id, title)\r\n    }\r\n\r\n    const changeToDoListTitle = (newTitle: string) => {\r\n        props.changeToDoListTitle(props.id, newTitle)\r\n    }\r\n\r\n    return (\r\n        <Grid item sm={6} md={4} lg={3}>\r\n            <Paper elevation={20} sx={{marginBottom: 3, padding: 3, bgcolor: \"#fbfae4\", width: \"fit-content\"}}>\r\n                <Typography variant=\"h5\" component=\"div\" align=\"center\" gutterBottom={true} fontWeight={600} maxWidth={270}>\r\n                    <EditableSpan title={props.title} onChange={changeToDoListTitle}/>\r\n\r\n                    <IconButton onClick={ () => props.removeList(props.id) }\r\n                                color={'primary'}\r\n                                size={'small'}\r\n                    >\r\n                        <DeleteIcon fontSize={'small'} />\r\n                    </IconButton>\r\n                </Typography>\r\n\r\n                <AddItem addItem={addTask} defaultTitle={''} />\r\n\r\n                <List sx={{ width: '100%', maxWidth: 270 }}>\r\n                    {props.tasks.map(el => {\r\n                        const onChangeHandler = (newTitle: string) => {\r\n                            props.changeTaskTitle(props.id, el.id, newTitle)\r\n                        }\r\n\r\n                        return (\r\n                            <ListItem key={el.id}\r\n                                      className={el.isDone ? 'is-done' : ''}\r\n                                      divider={true}\r\n                                      sx={{ padding: \"5px\" }}\r\n                            >\r\n                                <Checkbox\r\n                                    checked={el.isDone}\r\n                                    onChange={ () => props.changeStatus(props.id, el.id) }\r\n                                    size={'small'}\r\n                                />\r\n\r\n                                <EditableSpan title={el.title} onChange={onChangeHandler} />\r\n\r\n                                <IconButton onClick={ () => props.removeTask(props.id, el.id) }\r\n                                            color={'primary'}\r\n                                            size={'small'}\r\n                                >\r\n                                    <DeleteIcon fontSize={'small'} />\r\n                                </IconButton>\r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                </List>\r\n\r\n                <ButtonGroup variant={'outlined'}\r\n                             color={'primary'}\r\n                             size={'small'}\r\n                >\r\n                    <Button onClick={ () => props.changeFilter(props.id, 'all') }\r\n                            variant={props.filter === 'all' ? 'contained' : undefined}\r\n                    > Все </Button>\r\n\r\n                    <Button onClick={ () => props.changeFilter(props.id, 'active') }\r\n                            variant={props.filter === 'active' ? 'contained' : undefined}\r\n                    > Активные </Button>\r\n\r\n                    <Button onClick={ () => props.changeFilter(props.id, 'done') }\r\n                            variant={props.filter === 'done' ? 'contained' : undefined}\r\n                    > Завершенные </Button>\r\n                </ButtonGroup>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}","import {FilterType, ToDoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\ntype ActionType = removeTDListACType\r\n    | addTDListACType\r\n    | changeTDLTitleACType\r\n    | changeFilterACType\r\n\r\nexport const tdlInitialState: Array<ToDoListType> = [\r\n    {id: v1(), title: 'What to learn ', filter: 'all'},\r\n    {id: v1(), title: 'What to buy ', filter: 'active'},\r\n    {id: v1(), title: 'Films to watch ', filter: 'done'},\r\n]\r\n\r\nexport const todolistReducer = (state: Array<ToDoListType> = tdlInitialState, action: ActionType): ToDoListType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.payload.toDoListId)\r\n        case 'ADD-TODOLIST':\r\n            return [ { id: action.payload.toDoListId, title: action.payload.title, filter: 'all' }, ...state ]\r\n        case 'CHANGE-TDL-TITLE':\r\n            return state.map(tl => tl.id === action.payload.toDoListId ? {...tl, title: action.payload.title} : tl)\r\n        case 'CHANGE-FILTER':\r\n            return state.map(tl => tl.id === action.payload.toDoListId ? {...tl, filter: action.payload.filter} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype removeTDListACType = ReturnType<typeof removeTDListAC>\r\nexport const removeTDListAC = (toDoListId: string) => {\r\n    return { type: 'REMOVE-TODOLIST', payload: {toDoListId} } as const\r\n}\r\ntype addTDListACType = ReturnType<typeof addTDListAC>\r\nexport const addTDListAC = (toDoListId: string, title: string) => {\r\n    return { type: 'ADD-TODOLIST', payload: {toDoListId, title} } as const\r\n}\r\ntype changeTDLTitleACType = ReturnType<typeof changeTDLTitleAC>\r\nexport const changeTDLTitleAC = (toDoListId: string, title: string) => {\r\n    return { type: 'CHANGE-TDL-TITLE', payload: {toDoListId, title} } as const\r\n}\r\ntype changeFilterACType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (toDoListId: string, filter: FilterType) => {\r\n    return {type: 'CHANGE-FILTER', payload: {toDoListId, filter} } as const\r\n}","import {v1} from 'uuid';\r\nimport {TasksListType} from '../App';\r\nimport {tdlInitialState} from './todolist-reducer';\r\n\r\ntype ActionType = removeTaskACType\r\n    | addTaskACType\r\n    | changeTaskTitleACType\r\n    | changeStatusACType\r\n    | addTasksArrayACType\r\n    | removeTasksArrayACType\r\n\r\nconst initialState: TasksListType = {\r\n    [tdlInitialState[0]?.id]: [\r\n        {id: v1(), title: \"HTML/CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"TS\", isDone: false},\r\n        {id: v1(), title: \"React\", isDone: false},\r\n        {id: v1(), title: \"Python\", isDone: true},\r\n        {id: v1(), title: \"Django\", isDone: true},\r\n    ],\r\n    [tdlInitialState[1]?.id]: [\r\n        {id: v1(), title: \"Хлеб\", isDone: true},\r\n        {id: v1(), title: \"Молоко\", isDone: false},\r\n        {id: v1(), title: \"Сок\", isDone: false},\r\n        {id: v1(), title: \"Витамины\", isDone: true},\r\n    ],\r\n    [tdlInitialState[2]?.id]: [\r\n        {id: v1(), title: \"Дориан Грей\", isDone: true},\r\n        {id: v1(), title: \"Зеленая миля\", isDone: true},\r\n        {id: v1(), title: \"Знакомьтесь, Джо Блэк\", isDone: true},\r\n    ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksListType = initialState, action: ActionType): TasksListType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.payload.toDoListId]:\r\n                state[action.payload.toDoListId].filter(t => t.id !== action.payload.taskId)\r\n            }\r\n        case 'ADD-TASK':\r\n            return {...state, [action.payload.toDoListId]:\r\n                [ {id: v1(), title: action.payload.title, isDone: false}, ...state[action.payload.toDoListId] ]\r\n            }\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {...state, [action.payload.toDoListId]: state[action.payload.toDoListId].map(\r\n                t => t.id === action.payload.taskId ? {...t, title: action.payload.title} : t\r\n            )}\r\n        case 'CHANGE-STATUS':\r\n            return {...state, [action.payload.toDoListId]: state[action.payload.toDoListId].map(\r\n                t => t.id === action.payload.taskId ? {...t, isDone: !t.isDone} : t\r\n            )}\r\n        case 'ADD-TASKS-ARRAY':\r\n            return { [action.payload.toDoListId]: [], ...state }\r\n        case 'REMOVE-TASKS-ARRAY':\r\n            let newState = {...state}\r\n            delete newState[action.payload.toDoListId]\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\nexport const removeTaskAC = (toDoListId: string, taskId: string) => {\r\n    return { type: 'REMOVE-TASK', payload: {toDoListId, taskId} } as const\r\n}\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\nexport const addTaskAC = (toDoListId: string, title: string) => {\r\n    return { type: 'ADD-TASK', payload: {toDoListId, title} } as const\r\n}\r\ntype changeTaskTitleACType = ReturnType<typeof changeTaskTitleAC>\r\nexport const changeTaskTitleAC = (toDoListId: string, taskId: string, title: string) => {\r\n    return { type: 'CHANGE-TASK-TITLE', payload: {toDoListId, taskId, title} } as const\r\n}\r\ntype changeStatusACType = ReturnType<typeof changeStatusAC>\r\nexport const changeStatusAC = (toDoListId: string, taskId: string) => {\r\n    return { type: 'CHANGE-STATUS', payload: {toDoListId, taskId} } as const\r\n}\r\ntype addTasksArrayACType = ReturnType<typeof addTasksArrayAC>\r\nexport const addTasksArrayAC = (toDoListId: string) => {\r\n    return { type: 'ADD-TASKS-ARRAY', payload: {toDoListId} } as const\r\n}\r\ntype removeTasksArrayACType = ReturnType<typeof removeTasksArrayAC>\r\nexport const removeTasksArrayAC = (toDoListId: string) => {\r\n    return { type: 'REMOVE-TASKS-ARRAY', payload: {toDoListId} } as const\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {TaskType, ToDoList} from \"./components/ToDoList\";\r\nimport {v1} from 'uuid';\r\nimport {AddItem} from './components/AddItem';\r\nimport {AppBar, Button, Container, Grid, IconButton, Toolbar, Typography} from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport {\r\n    addTaskAC, addTasksArrayAC, changeStatusAC, changeTaskTitleAC,\r\n    removeTaskAC, removeTasksArrayAC\r\n} from './state/tasks-reducer';\r\nimport {\r\n    addTDListAC, changeFilterAC, changeTDLTitleAC, removeTDListAC\r\n} from './state/todolist-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from './state/store';\r\n\r\nexport type FilterType = 'all' | 'active' | 'done'\r\nexport type ToDoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\nexport type TasksListType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppStateType, Array<ToDoListType>>( state => state.todolists )\r\n    const tasks = useSelector<AppStateType, TasksListType>( state => state.tasks )\r\n\r\n    function removeTask(toDoListId: string, taskId: string) {\r\n        dispatch(removeTaskAC(toDoListId, taskId))\r\n    }\r\n    function addTask(toDoListId: string, title: string) {\r\n        if (title && toDoListId) dispatch(addTaskAC(toDoListId, title))\r\n    }\r\n    function changeStatus(toDoListId: string, taskId: string) {\r\n        dispatch(changeStatusAC(toDoListId, taskId))\r\n    }\r\n    function changeTaskTitle(toDoListId: string, taskId: string, newTitle: string) {\r\n        dispatch(changeTaskTitleAC(toDoListId, taskId, newTitle))\r\n    }\r\n\r\n    function removeList(toDoListId: string) {\r\n        dispatch(removeTasksArrayAC(toDoListId))\r\n        dispatch(removeTDListAC(toDoListId))\r\n    }\r\n    function addToDoList(title: string) {\r\n        if (title) {\r\n            let toDoListId = v1()\r\n            dispatch(addTDListAC(toDoListId, title))\r\n            dispatch(addTasksArrayAC(toDoListId))\r\n        }\r\n    }\r\n    function changeToDoListTitle(toDoListId: string, newTitle: string) {\r\n        dispatch(changeTDLTitleAC(toDoListId, newTitle))\r\n    }\r\n    function changeFilter(toDoListId: string, filter: FilterType) {\r\n        dispatch(changeFilterAC(toDoListId, filter))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton\r\n                        size=\"large\"\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        sx={{ mr: 2 }}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n                        ToDoLists\r\n                    </Typography>\r\n\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Grid sx={{ marginTop: 3, marginLeft: 3 }}>\r\n                <AddItem addItem={ (title: string) => addToDoList(title) }\r\n                         defaultTitle={'Новый ToDoList'}\r\n                />\r\n            </Grid>\r\n\r\n            <Container maxWidth=\"xl\" sx={{ marginTop: 3 }}>\r\n                <Grid container spacing={5} justifyContent={'space-evenly'}>\r\n                    {todolists.map(el => {\r\n                        let filteredTasks = tasks[el.id]\r\n                        if (el.filter === 'active') filteredTasks = tasks[el.id].filter(task => !task.isDone)\r\n                        if (el.filter === 'done') filteredTasks = tasks[el.id].filter(task => task.isDone)\r\n\r\n                        return <ToDoList\r\n                            key={el.id}\r\n                            id={el.id}\r\n                            title={el.title}\r\n                            tasks={filteredTasks}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            filter={el.filter}\r\n                            removeList={removeList}\r\n                            changeToDoListTitle={changeToDoListTitle}\r\n                        />\r\n                        }\r\n                    )}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;","import {combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: tasksReducer\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\n// ReactDOM.render(<App />,  document.getElementById('root'));\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}